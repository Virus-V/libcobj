.\" -*- nroff -*-
.\"
.\" Copyright (c) 2000 Doug Rabson
.\"
.\" All rights reserved.
.\"
.\" This program is free software.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" $FreeBSD: releng/11.1/share/man/man9/cobj.9 227537 2011-11-15 20:11:03Z marius $
.\"
.Dd November 14, 2011
.Dt COBJ 3
.Os
.Sh NAME
.Nm cobj
.Nd an object system for FreeBSD derived from kobj(9) framework
.Sh SYNOPSIS
.In libcobj.h
.Ft int
.Fn cobj_class_compile "cobj_class_t cls"
.Ft int
.Fn cobj_class_compile_static "cobj_class_t cls" "cobj_ops_t ops"
.Ft int
.Fn cobj_class_free "cobj_class_t cls"
.Ft cobj_t
.Fn cobj_create "cobj_class_t cls"
.Ft int
.Fn cobj_init "cobj_t obj" "cobj_class_t cls"
.Ft int
.Fn cobj_init_static "cobj_t obj" "cobj_class_t cls"
.Ft int
.Fn cobj_delete "cobj_t obj"
.Fn DEFINE_CLASS name "cobj_method_t *methods" "size_t size"
.Sh DESCRIPTION
The kernel object system implements an object-oriented programming
system in the
.Fx
kernel.
The system is based around the concepts of interfaces, which are
descriptions of sets of methods; classes, which are lists of functions
implementing certain methods from those interfaces; and objects,
which combine a class with a structure in memory.
.Pp
Methods are called using a dynamic method dispatching algorithm which
is designed to allow new interfaces and classes to be introduced into
the system at runtime.
The method dispatch algorithm is designed to be both fast and robust
and is only slightly more expensive than a direct function call,
making kernel objects suitable for performance-critical algorithms.
.Pp
Suitable uses for kernel objects are any algorithms which need some
kind of polymorphism (i.e., many different objects which can be treated
in a uniform way).
The common behaviour of the objects is described by a suitable
interface and each different type of object is implemented by a
suitable class.
.Pp
The simplest way to create a kernel object is to call
.Fn cobj_create
with a suitable class.
This will allocate memory for the object based on the object size
specified by the class and initialise it by zeroing the memory and
installing a pointer to the class' method dispatch table.
Objects created in this way should be freed by calling
.Fn cobj_delete .
.Pp
Clients which would like to manage the allocation of memory
themselves should call
.Fn cobj_init
or
.Fn cobj_init_static
with a pointer to the memory for the object and the class which
implements it.
It is also possible to use
.Fn cobj_init
and
.Fn cobj_init_static
to change the class for an object.
This should be done with care as the classes must agree on the layout
of the object.
.Pp
The functions
.Fn cobj_class_compile ,
.Fn cobj_class_compile_static
and
.Fn cobj_class_free
are used to process a class description to make method dispatching
efficient.
A client should not normally need to call these since a class
will automatically be compiled the first time it is used.
If a class is to be used before
.Xr malloc 3
then
.Fn cobj_class_compile_static
should be called with the class and a pointer to a statically
allocated
.Vt cobj_ops
structure before the class is used to initialise any objects.
In that case, also
.Fn cobj_init_static
should be used instead of
.Fn cobj_init .
.Pp
To define a class, first define a simple array of
.Vt cobj_method_t .
Each method which the class implements should be entered into the
table using the macro
.Fn COBJ_METHOD
which takes the name of the method (including its interface) and a
pointer to a function which implements it.
The table should be terminated with two zeros.
The macro
.Fn DEFINE_CLASS
can then be used to initialise a
.Vt cobj_class_t
structure.
The size argument to
.Fn DEFINE_CLASS
specifies how much memory should be allocated for each object.
.Sh HISTORY
Some of the concepts for this interface appeared in the device
framework used for the alpha port of
.Fx 3.0
and more widely in
.Fx 4.0 .
.Sh AUTHORS
This manual page was written by
.An Doug Rabson .
